{"version":3,"sources":["icons/successIcon.svg","icons/failedIcon.svg","icons/inProgressIcon.svg","icons/icons.ts","TotalStatus.tsx","Dashboard.tsx","storage.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","getIcon","statuses","some","status","failedIcon","inProgressIcon","successIcon","totalStatusContext","createContext","undefined","TotalStatusProvider","children","useState","Map","projectStatuses","setProjectStatuses","context","useMemo","projectId","map","get","set","Provider","value","url","Array","from","values","settings","Dashboard","columns","style","display","gridTemplateColumns","count","width","gridGap","padding","justifyContent","projectStatusQuery","gql","ProjectStatus","projectPath","setProjectStatus","useContext","query","useQuery","variables","fullPath","pollInterval","error","loading","project","data","pipelines","nodes","webUrl","URL","alignContent","gridTemplateRows","href","target","alignItems","margin","flex","name","protocol","host","detailedStatus","detailsPath","marginLeft","height","backgroundImage","backgroundSize","visibility","label","repository","tree","lastCommit","opacity","title","marginTop","src","author","avatarUrl","alt","marginRight","borderRadius","accessToken","localStorage","getItem","config","JSON","parse","err","console","SettingsPage","props","setAccessToken","stringify","setConfig","flexDirection","boxSizing","paddingBottom","maxWidth","onSubmit","e","preventDefault","setItem","window","location","reload","saveSettings","htmlFor","id","onChange","border","background","alignSelf","fontSize","color","Dashboards","ApolloClient","uri","gitlabUrl","headers","Authorization","client","dashboards","dashboard","onClick","showSettings","position","top","right","paddingTop","textAlign","widgets","widget","Boolean","hostname","match","ReactDOM","render","setShowSettings","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,4C,sQCI9BC,EAAU,sCAAIC,EAAJ,yBAAIA,EAAJ,uBACrBA,EAASC,MAAK,SAAAC,GAAM,MAAe,WAAXA,KACpBC,IACAH,EAASC,MACP,SAAAC,GAAM,MACO,YAAXA,GACW,yBAAXA,GACW,cAAXA,GACW,YAAXA,KAEJE,IACAC,KCLAC,EAAqBC,6BAEzBC,GAIWC,EAAsB,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,SAAwC,EAC9BC,mBAAS,IAAIC,KADiB,mBACrEC,EADqE,KACpDC,EADoD,KAGtEC,EAAUC,mBACd,kBAAM,SAACC,EAAmBf,GACxBY,GAAmB,SAAAI,GACjB,OAAIA,EAAIC,IAAIF,KAAef,EAAegB,IAE1CA,EAAM,IAAIN,IAAIM,IACVE,IAAIH,EAAWf,GACZgB,SAGX,IAGF,OACE,kBAACZ,EAAmBe,SAApB,CAA6BC,MAAOP,GAClC,kBAAC,IAAD,CAASQ,IAAKxB,EAAO,WAAP,cAAWyB,MAAMC,KAAKZ,EAAgBa,cACnDhB,I,0pBC3BA,ICWIiB,EDXEC,EAAY,SAAC,GAMnB,IAAD,IALJlB,EAKI,EALJA,SAKI,IAJJmB,eAII,MAJM,GAIN,EACJ,OACE,yBACEC,MAAO,CACLC,QAAS,OACTC,oBAAoB,UAAD,iBAAYH,EAAQI,aAApB,QACjB,WADiB,uBACFJ,EAAQK,aADN,QACe,IADf,OAEnBC,QAAS,GACTC,QAAS,GACTC,eAAgB,WAGjB3B,IAKD4B,EAAqBC,YAAH,KAoCXC,EAAgB,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,YACxBC,EDtDiCC,qBAAWrC,GCuD5CsC,EAAQC,YAASP,EAAoB,CACzCQ,UAAW,CAAEC,SAAUN,GACvBO,aAAc,MAGhB,GAAIJ,EAAMK,MACR,OACE,4DAEE,6BACE,wCAAUL,EAAMK,UAIxB,GAAIL,EAAMM,QAAS,OAAO,yCAE1B,IAAMC,EAAUP,EAAMQ,KAAKD,QAC3B,IAAKA,EAAS,OAAO,8CAAoBV,GAEzCC,EAAiBD,EAAaU,EAAQE,UAAUC,MAAM,GAAGpD,QAEzD,IAAMqD,EAAS,IAAIC,IAAIL,EAAQI,QAE/B,OACE,yBACEzB,MAAO,CACLC,QAAS,OACT0B,aAAc,QACdtB,QAAS,EACTuB,iBAAkB,gCAGpB,uBACEC,KAAMR,EAAQI,OACdK,OAAO,SACP9B,MAAO,CACLC,QAAS,OACT8B,WAAY,WAGd,wBAAI/B,MAAO,CAAEgC,OAAQ,EAAGC,KAAM,IAAMZ,EAAQa,MAC5C,uBACEL,KAAI,UAAKJ,EAAOU,SAAZ,aAAyBV,EAAOW,MAAhC,OAAuCf,EAAQE,UAAUC,MAAM,GAAGa,eAAeC,aACrFR,OAAO,SACP9B,MAAO,CACLuC,WAAY,EACZnC,MAAO,GACPoC,OAAQ,GACRC,gBAAgB,OAAD,OAASxE,EACtBoD,EAAQE,UAAUC,MAAM,GAAGpD,QADd,KAGfsE,eAAgB,YAGlB,0BAAM1C,MAAO,CAAE2C,WAAY,WACxBtB,EAAQE,UAAUC,MAAM,GAAGa,eAAeO,SAIjD,uBACEf,KAAI,UAAKR,EAAQwB,WAAWC,KAAKC,WAAWtB,QAC5CK,OAAO,SACP9B,MAAO,CAAEgD,QAAS,KAEjB3B,EAAQwB,WAAWC,KAAKC,WAAWE,OAEtC,yBACEjD,MAAO,CACLC,QAAS,OACT8B,WAAY,SACZmB,UAAW,IAGb,yBACEC,IAAG,UAAK1B,EAAOU,SAAZ,aAAyBV,EAAOW,MAAhC,OAAuCf,EAAQwB,WAAWC,KAAKC,WAAWK,OAAOC,WACpFC,IAAI,GACJtD,MAAO,CACLuD,YAAa,EACbnD,MAAO,GACPoC,OAAQ,GACRgB,aAAc,SAGjBnC,EAAQwB,WAAWC,KAAKC,WAAWK,OAAOlB,QCjIjD,IACE,IAAMuB,EAAcC,aAAaC,QAAQ,eACnCC,EAASF,aAAaC,QAAQ,UAEhCF,GAAeG,IACjB/D,EAAW,CACT4D,cACAG,OAAQC,KAAKC,MAAMF,KAGvB,MAAOG,GACPC,QAAQ7C,MAAM,uBAAwB4C,GC3BnC,IAaDE,EAAe,SAACC,GAA4C,IAAD,IACzBrF,mBAAQ,UAC5CqF,EAAMrE,SAAS4D,mBAD6B,QACd,IAF+B,mBACxDA,EADwD,KAC3CU,EAD2C,OAInCtF,oBAAS,kBACnCqF,EAAMrE,SAAS+D,OACXC,KAAKO,UAAUF,EAAMrE,SAAS+D,YAAQlF,EAAW,GACjD,MAPyD,mBAIxDkF,EAJwD,KAIhDS,EAJgD,KAU/D,OACE,0BACErE,MAAO,CACLC,QAAS,OACTqE,cAAe,SACfC,UAAW,aACXC,cAAe,GACfxC,OAAQ,OACRQ,OAAQ,QACRiC,SAAU,KAEZC,SAAU,SAAAC,GACRA,EAAEC,iBDJH,SAAsB/E,GAC3B6D,aAAamB,QAAQ,cAAehF,EAAS4D,aAC7CC,aAAamB,QAAQ,SAAUhB,KAAKO,UAAUvE,EAAS+D,SACvDkB,OAAOC,SAASC,SCEVC,CAAa,CAAExB,cAAaG,OAAQC,KAAKC,MAAMF,OAGjD,2BAAOsB,QAAQ,eAAf,uBACA,2BACEC,GAAG,cACHjD,KAAK,cACL1C,MAAOiE,EACP2B,SAAU,SAAAT,GAAC,OAAIR,EAAeQ,EAAE7C,OAAOtC,QACvCQ,MAAO,CACLM,QAAS,UACT+E,OAAQ,OACR7B,aAAc,EACd8B,WAAY,8BAGhB,2BAAOJ,QAAQ,eAAf,oBACA,8BACEC,GAAG,SACHjD,KAAK,SACL1C,MAAOoE,EACPwB,SAAU,SAAAT,GAAC,OAAIN,EAAUM,EAAE7C,OAAOtC,QAClCQ,MAAO,CACLiC,KAAM,EACN3B,QAAS,EACT+E,OAAQ,OACR7B,aAAc,EACd8B,WAAY,8BAGhB,4BACEtF,MAAO,CACLuF,UAAW,WACXrC,UAAW,GACX5C,QAAS,WACTkF,SAAU,GACVH,OAAQ,OACR7B,aAAc,EACdiC,MAAO,QACPH,WAAY,6BAThB,UAkBAI,EAAa,SAACxB,GAGb,IAAD,EACarF,oBACf,kBACE,IAAI8G,IAAa,CACfC,IAAI,GAAD,OAAK1B,EAAMrE,SAAS+D,OAAOiC,UAA3B,gBACHC,QAAS5B,EAAMrE,SAAS4D,YACpB,CACEsC,cAAc,UAAD,OAAY7B,EAAMrE,SAAS4D,mBAE1C/E,OARHsH,EADH,oBAaJ,OACE,kBAAC,IAAD,CAAgBA,OAAQA,GACtB,kBAAC,EAAD,KACG9B,EAAMrE,SAAS+D,OAAOqC,WAAW7G,KAAI,SAAA8G,GAAS,OAC7C,oCACE,4BACEC,QAASjC,EAAMkC,aACfpG,MAAO,CACLqG,SAAU,QACVC,IAAK,GACLC,MAAO,GACPjG,QAAS,EACT+E,OAAQ,OACRI,MAAO,QACPH,WAAY,SAThB,YAcA,wBAAItF,MAAO,CAAEwG,WAAY,GAAIC,UAAW,WACrCP,EAAUhE,MAEb,kBAAC,EAAD,CAAWnC,QAASmG,EAAUnG,SAC3BmG,EAAUQ,QAAQtH,KAAI,SAAAuH,GAAM,OAC3B,kBAAC,EAAD,CAAehG,YAAagG,EAAOhG,yBCvH/BiG,QACW,cAA7B9B,OAAOC,SAAS8B,UAEe,UAA7B/B,OAAOC,SAAS8B,UAEhB/B,OAAOC,SAAS8B,SAASC,MACvB,2DCXNC,IAASC,OAAO,mBFAG,WAAO,IAAD,EACiBnI,wBAAsBH,IAAbmB,GAD1B,mBAChBuG,EADgB,KACFa,EADE,KAGvB,OAAOb,IAAiBvG,EACtB,kBAAC,EAAD,CAAcA,SAAQ,OAAEA,QAAF,IAAEA,IAAY,CAAE4D,YAAa,MAEnD,kBAAC,EAAD,CACE5D,SAAUA,EACVuG,aAAc,kBAAMa,GAAgB,QER1B,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvG,GACL6C,QAAQ7C,MAAMA,EAAMwG,c","file":"static/js/main.7a17d327.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/successIcon.eecad4ab.svg\";","module.exports = __webpack_public_path__ + \"static/media/failedIcon.fb36fc3e.svg\";","module.exports = __webpack_public_path__ + \"static/media/inProgressIcon.eeff3d0f.svg\";","import successIcon from \"./successIcon.svg\"\nimport failedIcon from \"./failedIcon.svg\"\nimport inProgressIcon from \"./inProgressIcon.svg\"\n\nexport const getIcon = (...statuses: string[]) =>\n  statuses.some(status => status === \"FAILED\")\n    ? failedIcon\n    : statuses.some(\n        status =>\n          status === \"CREATED\" ||\n          status === \"WAITING_FOR_RESOURCE\" ||\n          status === \"PREPARING\" ||\n          status === \"RUNNING\",\n      )\n    ? inProgressIcon\n    : successIcon\n","import React, {\n  createContext,\n  useState,\n  useMemo,\n  useContext,\n  ReactNode,\n} from \"react\"\nimport Favicon from \"react-favicon\"\nimport { getIcon } from \"./icons/icons\"\n\nconst totalStatusContext = createContext<\n  (projectId: string, status: string) => void\n>(undefined as any)\n\nexport const useSetProjectStatus = () => useContext(totalStatusContext)\n\nexport const TotalStatusProvider = ({ children }: { children: ReactNode }) => {\n  const [projectStatuses, setProjectStatuses] = useState(new Map())\n\n  const context = useMemo(\n    () => (projectId: string, status: string) => {\n      setProjectStatuses(map => {\n        if (map.get(projectId) === status) return map\n\n        map = new Map(map)\n        map.set(projectId, status)\n        return map\n      })\n    },\n    [],\n  )\n\n  return (\n    <totalStatusContext.Provider value={context}>\n      <Favicon url={getIcon(...Array.from(projectStatuses.values()))} />\n      {children}\n    </totalStatusContext.Provider>\n  )\n}\n","import { useQuery } from \"@apollo/react-hooks\"\nimport { gql } from \"apollo-boost\"\nimport React, { ReactNode } from \"react\"\nimport { useSetProjectStatus } from \"./TotalStatus\"\nimport { getIcon } from \"./icons/icons\"\n\nexport type ColumnConfig = { count?: number | string; width?: number }\n\nexport const Dashboard = ({\n  children,\n  columns = {},\n}: {\n  children: ReactNode\n  columns?: ColumnConfig\n}) => {\n  return (\n    <div\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${columns.count ??\n          \"auto-fit\"}, ${columns.width ?? 230}px)`,\n        gridGap: 40,\n        padding: 40,\n        justifyContent: \"center\",\n      }}\n    >\n      {children}\n    </div>\n  )\n}\n\nconst projectStatusQuery = gql`\n  query projectStatus($fullPath: ID!) {\n    project(fullPath: $fullPath) {\n      name\n      webUrl\n      environments {\n        nodes {\n          name\n        }\n      }\n      repository {\n        tree {\n          lastCommit {\n            title\n            webUrl\n            author {\n              avatarUrl\n              name\n            }\n          }\n        }\n      }\n      pipelines(first: 1) {\n        nodes {\n          status\n          detailedStatus {\n            label\n            detailsPath\n          }\n          finishedAt\n        }\n      }\n    }\n  }\n`\n\nexport const ProjectStatus = ({ projectPath }: { projectPath: string }) => {\n  const setProjectStatus = useSetProjectStatus()\n  const query = useQuery(projectStatusQuery, {\n    variables: { fullPath: projectPath },\n    pollInterval: 10000,\n  })\n\n  if (query.error)\n    return (\n      <p>\n        Error fetching project status:\n        <pre>\n          <code>{`${query.error}`}</code>\n        </pre>\n      </p>\n    )\n  if (query.loading) return <p>Loading...</p>\n\n  const project = query.data.project\n  if (!project) return <p>Missing project {projectPath}</p>\n\n  setProjectStatus(projectPath, project.pipelines.nodes[0].status)\n\n  const webUrl = new URL(project.webUrl)\n\n  return (\n    <div\n      style={{\n        display: \"grid\",\n        alignContent: \"start\",\n        gridGap: 8,\n        gridTemplateRows: \"min-content 1fr min-content\",\n      }}\n    >\n      <a\n        href={project.webUrl}\n        target=\"gitlab\"\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n        }}\n      >\n        <h3 style={{ margin: 0, flex: 1 }}>{project.name}</h3>\n        <a\n          href={`${webUrl.protocol}//${webUrl.host}${project.pipelines.nodes[0].detailedStatus.detailsPath}`}\n          target=\"gitlab\"\n          style={{\n            marginLeft: 8,\n            width: 20,\n            height: 20,\n            backgroundImage: `url(${getIcon(\n              project.pipelines.nodes[0].status,\n            )})`,\n            backgroundSize: \"contain\",\n          }}\n        >\n          <span style={{ visibility: \"hidden\" }}>\n            {project.pipelines.nodes[0].detailedStatus.label}\n          </span>\n        </a>\n      </a>\n      <a\n        href={`${project.repository.tree.lastCommit.webUrl}`}\n        target=\"gitlab\"\n        style={{ opacity: 0.9 }}\n      >\n        {project.repository.tree.lastCommit.title}\n      </a>\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          marginTop: 8,\n        }}\n      >\n        <img\n          src={`${webUrl.protocol}//${webUrl.host}${project.repository.tree.lastCommit.author.avatarUrl}`}\n          alt=\"\"\n          style={{\n            marginRight: 8,\n            width: 32,\n            height: 32,\n            borderRadius: \"50%\",\n          }}\n        />\n        {project.repository.tree.lastCommit.author.name}\n      </div>\n    </div>\n  )\n}\n","import { ColumnConfig } from \"./Dashboard\"\n\nexport type Config = {\n  gitlabUrl: string\n  dashboards: Array<{\n    name: string\n    columns?: ColumnConfig\n    widgets: Array<{\n      type: \"ProjectStatus\"\n      projectPath: string\n    }>\n  }>\n}\n\nexport type Settings = {\n  accessToken: string\n  config: Config\n}\n\nexport let settings: Settings | undefined\n\n// eslint-disable-next-line no-lone-blocks\n{\n  try {\n    const accessToken = localStorage.getItem(\"accessToken\")\n    const config = localStorage.getItem(\"config\")\n\n    if (accessToken && config) {\n      settings = {\n        accessToken,\n        config: JSON.parse(config),\n      }\n    }\n  } catch (err) {\n    console.error(\"Error reading config\", err)\n  }\n}\n\nexport function saveSettings(settings: Settings) {\n  localStorage.setItem(\"accessToken\", settings.accessToken)\n  localStorage.setItem(\"config\", JSON.stringify(settings.config))\n  window.location.reload()\n}\n","import { ApolloProvider } from \"@apollo/react-hooks\"\nimport ApolloClient from \"apollo-boost\"\nimport React, { useState } from \"react\"\nimport { Dashboard, ProjectStatus } from \"./Dashboard\"\nimport { TotalStatusProvider } from \"./TotalStatus\"\nimport { settings, Settings, saveSettings } from \"./storage\"\n\nexport const App = () => {\n  const [showSettings, setShowSettings] = useState(settings === undefined)\n\n  return showSettings || !settings ? (\n    <SettingsPage settings={settings ?? { accessToken: \"\" }} />\n  ) : (\n    <Dashboards\n      settings={settings}\n      showSettings={() => setShowSettings(true)}\n    />\n  )\n}\n\nconst SettingsPage = (props: { settings: Partial<Settings> }) => {\n  const [accessToken, setAccessToken] = useState(\n    props.settings.accessToken ?? \"\",\n  )\n  const [config, setConfig] = useState(() =>\n    props.settings.config\n      ? JSON.stringify(props.settings.config, undefined, 2)\n      : \"\",\n  )\n\n  return (\n    <form\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        boxSizing: \"border-box\",\n        paddingBottom: 54,\n        margin: \"auto\",\n        height: \"100vh\",\n        maxWidth: 600,\n      }}\n      onSubmit={e => {\n        e.preventDefault()\n        saveSettings({ accessToken, config: JSON.parse(config) })\n      }}\n    >\n      <label htmlFor=\"accessToken\">Gitlab Access Token</label>\n      <input\n        id=\"accessToken\"\n        name=\"accessToken\"\n        value={accessToken}\n        onChange={e => setAccessToken(e.target.value)}\n        style={{\n          padding: \"4px 8px\",\n          border: \"none\",\n          borderRadius: 5,\n          background: \"rgba(255, 255, 255, 0.9)\",\n        }}\n      />\n      <label htmlFor=\"accessToken\">Dashboard Config</label>\n      <textarea\n        id=\"config\"\n        name=\"config\"\n        value={config}\n        onChange={e => setConfig(e.target.value)}\n        style={{\n          flex: 1,\n          padding: 8,\n          border: \"none\",\n          borderRadius: 5,\n          background: \"rgba(255, 255, 255, 0.9)\",\n        }}\n      />\n      <button\n        style={{\n          alignSelf: \"flex-end\",\n          marginTop: 32,\n          padding: \"8px 24px\",\n          fontSize: 18,\n          border: \"none\",\n          borderRadius: 5,\n          color: \"white\",\n          background: \"rgba(255, 255, 255, 0.3)\",\n        }}\n      >\n        Save\n      </button>\n    </form>\n  )\n}\n\nconst Dashboards = (props: {\n  settings: Settings\n  showSettings: () => void\n}) => {\n  const [client] = useState(\n    () =>\n      new ApolloClient({\n        uri: `${props.settings.config.gitlabUrl}/api/graphql`,\n        headers: props.settings.accessToken\n          ? {\n              Authorization: `Bearer ${props.settings.accessToken}`,\n            }\n          : undefined,\n      }),\n  )\n\n  return (\n    <ApolloProvider client={client}>\n      <TotalStatusProvider>\n        {props.settings.config.dashboards.map(dashboard => (\n          <>\n            <button\n              onClick={props.showSettings}\n              style={{\n                position: \"fixed\",\n                top: 42,\n                right: 42,\n                padding: 0,\n                border: \"none\",\n                color: \"white\",\n                background: \"none\",\n              }}\n            >\n              Settings\n            </button>\n            <h1 style={{ paddingTop: 20, textAlign: \"center\" }}>\n              {dashboard.name}\n            </h1>\n            <Dashboard columns={dashboard.columns}>\n              {dashboard.widgets.map(widget => (\n                <ProjectStatus projectPath={widget.projectPath} />\n              ))}\n            </Dashboard>\n          </>\n        ))}\n      </TotalStatusProvider>\n    </ApolloProvider>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport \"focus-visible\"\nimport { App } from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}